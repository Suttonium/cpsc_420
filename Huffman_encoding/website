
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
<title> Spring 2018 CPSC420 Program 3</title>
</head>

<body>

<div align="center"> 
<h2>
CPSC 420<br> Spring 2018<br>
Program 3: Huffman Encoding
</h2>
</div>

<h3>Partners</h3>
You may have 0-2 partners for this program. 


<h3>Introduction</h3>
As you know, most text files use one or two bytes to store each
character. Your job is to read in different files to see how many bits
you can save using Huffman Encoding. You 
should have 4 input files:
<ol>
<li> this assignment, at 
<a href="http://www.pcs.cnu.edu/~lambert/Classes/cpsc420/420p3.html">
http://www.pcs.cnu.edu/~lambert/Classes/cpsc420/420p3.html</a>.
<li> 
A book of your choosing (indicate in a comment which book you chose).
I recommend that you look at The Gutenberg Project at
<a href="http://www.gutenberg.org">http://www.gutenberg.org/</a>, but
you may use any non-copyrighted book longer than 120,000 characters.
<li>
Your <tt>Huffman.java</tt> program. 
<li> A file with one line: <tt>A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BED</tt>
</ol>
All files should be local to your directory, and opened using relative
addressing.
<h3>Huffman.java</h3>
Your program should have 3 classes. The driver should be named
 <tt>Huffman.java</tt>.
This class should have 
a main method that calls the <tt>huffmanEncode</tt> method
four times, one for each file. <tt>huffmanEncode</tt> should
accept a String, the name of the file to be read.
<h4>Reports</h4>
Huffman.java should produce two reports, a summary,
and a detail report. For the summary report, you may want to
store summary data in static fields.


Here are the 
reports for the file containing: <tt>A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BED</tt>
from
<a href="https://en.wikipedia.org/wiki/Huffman_coding">
Huffman Encoding Wikipedia</a>  (with the addition of a newline
  character at the end of the line). Format the output appropriately
(spaced correctly and with 2 decimal points for doubles).
<pre>
Name TotalChars DiffChars MaxCodeLen AveCodeLen FileLen ByteFileLen HuffmanReduction
wiki         47         7          5       2.60     122         376         32.45%
</pre>
Here is how each of these numbers was calculated:
<table border =1>
<tr><td>TotalChars<td>Total number of characters read from the file
<tr><td>DiffChars<td>The total number of different characters (for the
file above, A, B, C, D, E, _ and newline).
<tr><td>MaxCodeLen<td>The longest code (for the file above, that is C
or the new line, both of which are 5 bits long)
<tr><td>AveCodeLen<td> This is total length of the file (from the next
column) divided by the
total number of characters (note: this is different from how Chapter 9
calculates the average, which is based on the Encoding scheme, not the
actual coded file)
<tr><td>FileLen<td>This is the total length of the file (each
character times the bit length of each character)
<tr><td>ByteFileLen<td>The number of total characters * 8 (the number
of bits in the file if each character is encoded as 8 bits)
<tr><td>HuffmanReduction<td>The size of the reduced file compared to a 
file with bytes for characters: 
FileLen / ByteFileLen * 100</table><p/>


You should also have a detailed report for each file which prints 
each character, its
encoding, and its Huffman code.
Here is the long report for the Wikipedia example.
<pre>
Char Freq Code
A:   11   10	 
B:    6	  1111	 
C:    2	  11101 
D:   10	  00	 
E:    7	  110	 
{NL}: 1	  11100  /* Note: It is ok to print a new line for this. */   
_:   10	  01    
</pre>

<h3>HuffmanCoding.java</h3>
 You should also have a HuffmanCoding class that creates a
priority queue of Nodes.
The PriorityQueue instance variable
should be initalized to
contain a <tt>Leaf</tt> Node
for each different character.
This priority queue should be transformed into a Huffman encoded tree by removing the first
two nodes then forming a new InternalNode with a total weight of the two removed nodes.
This process is modeled on Wikipedia for the above example.
HuffmanCoding should also create a lookup table (I used a HashMap) for each character and 
each code. The lookup table should look like this for the Wikipedia
  example (with the addition of a new line; you may include this or not).
<table border=1>
<th>Character<th> Code<br>
<tr><TD>A<TD>   10	 
<tr><TD>B<TD>	  1111	 
<tr><TD>C<TD>	  11101 
<tr><TD>D<TD>	  00	 
<tr><TD>E<TD>	  110	 
<tr><TD>{NL}<TD>	  11100 
<tr><TD>_<TD>   	  01    
</table>

<h3>Node.java and subclasses</h3>
You should have a Node class with two subclasses. The (minimal) APIs for those
classes are here (you may wish to add additional methods):<br>
<a href="doc/Node.html">Node</a><br>
<a href="doc/Leaf.html">Leaf</a><br>
<a href="doc/InternalNode.html">InternalNode</a></p>

Node should be an abstract class 
that implements the Comparable Interface 
(because PriorityQueues must have elements that are Comparable)
with 1 protected field, weight. Note: I have other methods in my
  classes. You can implement the classes completely differently or not
  use them at all, but
  you must use a PriorityQueue instance variable in HuffmanCoding.

The Leaf
class should have two instance variables: the character and its
 code.
The code should be a bit code, but to make it easier to manipulate, we will store
 these codes as Strings (so A, above, would have a code of "10").

The InternalNode class should have a left and right tree, both
of type Node.


<h3>References</h3>
You may use any references, but you must cite them. 
You may find
the
<a href="https://en.wikipedia.org/wiki/Huffman_coding">
Huffman Coding Wikipedia</a> page helpful. 

<h3>Documentation</h3>
Include a comment with all partners' names and what your program does.
 Indicate in the comment how long each class took
to write and to test. 
If anybody helped you on the program,
write a note about how they helped. 
If you helped anybody or received help, include a comment about that.
You should use the 
<a href="emptyhands.html">
Empty Hands policy</a> when writing the program.

Make sure each method has javadoc comments 
with @param and @return tags for each method, and @author tag
for the whole program.

<h3>ScreenShots</h3>
Take a screenshot of your program running, and generating the output
specified above.
To capture a window or screen, follow the directions at
<a href="../howtocaptureawindow.html">this</a> web page.<p/>


<h3>Submitting the program</h3>
Submit to scholar the following (unzipped) files: Huffman.java,
Node.java, Leaf.java, InternalNode.java, HuffmanCoding.java, screenshot.
<b>Make sure none of your file names have spaces in them.</b>
If you have partners, <b>1 partner</b> should submit everything.
I will not grade files if they are split across partners.
<hr>
</body>
</html>

